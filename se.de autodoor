/*
 * <== g.'s Airlock ===>
 * 
 * How to use:
 * 
 * Go into CustomData field of the doors which should be connected together as airlock and
 * give them the same number.
 * 
 * If the CustomData of the door remains as "-1" it's not connected
 * to the airlock system and just get closed if it's open.
 * 
 * Use [ignore] in CustomData of a door to get ignored by the script
 * 
 * Note: For performance reasons you need to recompile if doors or numbers has been changed
 */

// Config: How many server ticks to wait before the door get closed, a higher number means the door stays open longer
const int WaitTicksBeforeClose = 0;
const string ignoreTAG = "[ignore]";


List<IMyDoor>L=new List<IMyDoor>();Dictionary<int,List<IMyDoor>>K=new Dictionary<int,List<IMyDoor>>();Dictionary<int,int
>J=new Dictionary<int,int>();Program(){C();Runtime.UpdateFrequency=UpdateFrequency.Update10;}void Main(string I,
UpdateType H){foreach(int A in K.Keys){if(A==-1){foreach(var D in K[-1]){if(D.Status==DoorStatus.Open){J[-1]++;if(J[-1]>
WaitTicksBeforeClose){D.CloseDoor();J[-1]=0;}}}}else{G(A);}}}void G(int F){bool E=false;foreach(IMyDoor D in K[F]){if(D.Status!=DoorStatus.
Closed){E=true;break;}}if(E){foreach(IMyDoor D in K[F]){if(D.Status==DoorStatus.Closed){if(D.Enabled)D.Enabled=false;}else if(
D.Status==DoorStatus.Open){J[F]++;if(J[F]>WaitTicksBeforeClose){D.CloseDoor();J[F]=0;}}}}else{foreach(IMyDoor D in K[F]){
if(!D.Enabled)D.Enabled=true;}}}void C(){L.Clear();GridTerminalSystem.GetBlocksOfType<IMyDoor>(L,B=>B.IsSameConstructAs(Me
));K.Clear();foreach(var D in L){int A;if(D.CustomData==""){D.CustomData="-1";A=-1;}else if(D.CustomData.Trim().Equals(
ignoreTAG)){continue;}else{if(!int.TryParse(D.CustomData,out A))A=-1;}if(!K.ContainsKey(A)){K.Add(A,new List<IMyDoor>());J.Add(A,
0);}K[A].Add(D);}}
